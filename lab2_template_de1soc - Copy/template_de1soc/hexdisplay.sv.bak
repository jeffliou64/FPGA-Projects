module hexdisplay(input logic clk,
                        input logic dir,
                        input logic readdatavalid, 
                        input logic [22:0] addr,
                        output logic [6:0] HEX5, HEX4);

parameter num_0 = 7'b1000000;
parameter num_1 = 7'b1111001;
parameter num_2 = 7'b0100100;
parameter num_3 = 7'h0110000;
parameter num_4 = 7'b0011001;
parameter num_5 = 7'b1101101;
parameter num_6 = 7'b0000011;
parameter num_7 = 7'b1111000;
parameter num_8 = 7'b0000000;
parameter num_9 = 7'b0001000;

logic [3:0] sec;
logic [15:0] hex;
logic [15:0] count; //2^15=32768 which is bigger than 22000


always_ff @(posedge readdatavalid) begin
    if (count == 22000)
        count <= 0;
    else
        count <= count + 1;
end
    
always_ff @(posedge clk) begin
    if (dir) begin
        if (count == 22000 && addr != 23'h7FFFF)
            sec <= sec + 1;
        else if (addr == 23'h7FFFF)
            sec <= 0;
    end
    
    else begin
        if (count == 22000 && addr != 0)
            sec <= sec - 1;
        else if (addr == 0)
            sec <= 48;
    end
end

always_comb begin
    case (sec)
    0:  hex = {num_0, num_0};
    1:  hex = {num_0, num_1};
    2:  hex = {num_0, num_2};
    3:  hex = {num_0, num_3};
    4:  hex = {num_0, num_4};
    5:  hex = {num_0, num_5};
    6:  hex = {num_0, num_6};
    7:  hex = {num_0, num_7};
    8:  hex = {num_0, num_8};
    9:  hex = {num_0, num_9};
    10: hex = {num_1, num_0};
    11: hex = {num_1, num_1};
    12: hex = {num_1, num_2};
    13: hex = {num_1, num_3};
    14: hex = {num_1, num_4};
    15: hex = {num_1, num_5};
    16: hex = {num_1, num_6};
    17: hex = {num_1, num_7};
    18: hex = {num_1, num_8};
    19: hex = {num_1, num_9};
    20: hex = {num_2, num_0};
    21: hex = {num_2, num_1};
    22: hex = {num_2, num_2};
    23: hex = {num_2, num_3};
    24: hex = {num_2, num_4};
    25: hex = {num_2, num_5};
    26: hex = {num_2, num_6};
    27: hex = {num_2, num_7};
    28: hex = {num_2, num_8};
    29: hex = {num_2, num_9};
    30: hex = {num_3, num_0};
    31: hex = {num_3, num_1};
    32: hex = {num_3, num_2};
    33: hex = {num_3, num_3};
    34: hex = {num_3, num_4};
    35: hex = {num_3, num_5};
    36: hex = {num_3, num_6};
    37: hex = {num_3, num_7};
    38: hex = {num_3, num_8};
    39: hex = {num_3, num_9};
    40: hex = {num_4, num_0};
    41: hex = {num_4, num_1};
    42: hex = {num_4, num_2};
    43: hex = {num_4, num_3};
    44: hex = {num_4, num_4};
    45: hex = {num_4, num_5};
    46: hex = {num_4, num_6};
    47: hex = {num_4, num_7};
    48: hex = {num_4, num_8};
	 49: hex = {num_4, num_9};
    default: hex = {number_0, number_0};
endcase
end

always_ff @(posedge clk) begin
    {HEX5} = hex[15:8];
    {HEX4} = hex[7:0];
end
endmodule



