                    ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
                    ;
                    ;
                    ;
                    ;
                    ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
                    ; one second intervals.
                    ;
                    ;
                    ;**************************************************************************************
                    ; Port definitions
                    ;**************************************************************************************
                    ;
                    ;
                    ;
                    CONSTANT LED_PORT, 80               ;8 simple LEDs. Is an OUTPUT port.
                    CONSTANT DATA_IN_PORT, 00           ;input data port. this is an INPUT port.
                    CONSTANT LED_PORT_0, 40

                    ;**************************************************************************************
                    ; Special Register usage
                    ;**************************************************************************************
                    ;
                    ; No registers are given special names in this program.
                    ;
                    ;**************************************************************************************
                    ; Scratch Pad Memory Locations
                    ;**************************************************************************************
                    ;
                    ;
                    CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
                    CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
                    CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
                    CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
                    ;
                    CONSTANT LED_pattern, 04            ;remember state of LEDs (8-bit counter in this case)

                    ;
                    ;**************************************************************************************
                    ; Useful data constants
                    ;**************************************************************************************
                    ;
                    ;
                    ; Constant to define a software delay of 1us. This must be adjusted to reflect the
                    ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                    ; calculation highly predictable. The '6' in the following equation even allows for
                    ; 'CALL delay_1us' instruction in the initiating code.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                    ; For clock rates below 10MHz the value of 1 must be used and the operation will
                    ; become lower than intended. Interrupts may effect the timing of software based
                    ; delays.
                    ;
                    CONSTANT delay_1us_constant, 05
                    ;
                    ;
                    ;
                    ; ASCII table
                    ;
                    CONSTANT character_a, 61
                    CONSTANT character_b, 62
                    CONSTANT character_c, 63
                    CONSTANT character_d, 64
                    CONSTANT character_e, 65
                    CONSTANT character_f, 66
                    CONSTANT character_g, 67
                    CONSTANT character_h, 68
                    CONSTANT character_i, 69
                    CONSTANT character_j, 6A
                    CONSTANT character_k, 6B
                    CONSTANT character_l, 6C
                    CONSTANT character_m, 6D
                    CONSTANT character_n, 6E
                    CONSTANT character_o, 6F
                    CONSTANT character_p, 70
                    CONSTANT character_q, 71
                    CONSTANT character_r, 72
                    CONSTANT character_s, 73
                    CONSTANT character_t, 74
                    CONSTANT character_u, 75
                    CONSTANT character_v, 76
                    CONSTANT character_w, 77
                    CONSTANT character_x, 78
                    CONSTANT character_y, 79
                    CONSTANT character_z, 7A
                    CONSTANT character_A, 41
                    CONSTANT character_B, 42
                    CONSTANT character_C, 43
                    CONSTANT character_D, 44
                    CONSTANT character_E, 45
                    CONSTANT character_F, 46
                    CONSTANT character_G, 47
                    CONSTANT character_H, 48
                    CONSTANT character_I, 49
                    CONSTANT character_J, 4A
                    CONSTANT character_K, 4B
                    CONSTANT character_L, 4C
                    CONSTANT character_M, 4D
                    CONSTANT character_N, 4E
                    CONSTANT character_O, 4F
                    CONSTANT character_P, 50
                    CONSTANT character_Q, 51
                    CONSTANT character_R, 52
                    CONSTANT character_S, 53
                    CONSTANT character_T, 54
                    CONSTANT character_U, 55
                    CONSTANT character_V, 56
                    CONSTANT character_W, 57
                    CONSTANT character_X, 58
                    CONSTANT character_Y, 59
                    CONSTANT character_Z, 5A
                    CONSTANT character_0, 30
                    CONSTANT character_1, 31
                    CONSTANT character_2, 32
                    CONSTANT character_3, 33
                    CONSTANT character_4, 34
                    CONSTANT character_5, 35
                    CONSTANT character_6, 36
                    CONSTANT character_7, 37
                    CONSTANT character_8, 38
                    CONSTANT character_9, 39
                    CONSTANT character_colon, 3A
                    CONSTANT character_stop, 2E
                    CONSTANT character_semi_colon, 3B
                    CONSTANT character_minus, 2D
                    CONSTANT character_divide, 2F       ;'/'
                    CONSTANT character_plus, 2B
                    CONSTANT character_comma, 2C
                    CONSTANT character_less_than, 3C
                    CONSTANT character_greater_than, 3E
                    CONSTANT character_equals, 3D
                    CONSTANT character_space, 20
                    CONSTANT character_CR, 0D           ;carriage return
                    CONSTANT character_question, 3F     ;'?'
                    CONSTANT character_dollar, 24
                    CONSTANT character_exclaim, 21      ;'!'
                    CONSTANT character_BS, 08           ;Back Space command character
                    ;
                    ;
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Initialise the system
                    ;**************************************************************************************
                    ;
        cold_start: LOAD s0, 00                         ;clear 1 second counter and clear LEDs
                    STORE s0, LED_pattern
                    OUTPUT s0, LED_PORT
                    ;
                    ENABLE INTERRUPT                    ;enable one second heart beat
                    ;

                    ;**************************************************************************************
                    ; Main program
                    ;**************************************************************************************
                    ;
                    ; Display welcome message for design
                    ;
      main_program: LOAD s9, 01
                    OUTPUT s9, LED_PORT_0
                    CALL delay_1s

                    LOAD s9, 00
                    OUTPUT s9, LED_PORT_0
                    call delay_1s
                    JUMP main_program;


                    ;**************************************************************************************
                    ; Software delay routines
                    ;**************************************************************************************
                    ;
                    ; Delay of 1us.
                    ;
                    ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
                    ; instruction executes in 2 clock cycles making the calculation highly predictable.
                    ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
                    ; in the initiating code. Interrupts may effect software derived delays.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Registers used s0
                    ;
         delay_1us: LOAD s0, delay_1us_constant
          wait_1us: SUB s0, 01
                    JUMP NZ, wait_1us
                    RETURN
                    ;
                    ; Delay of 40us.
                    ;
                    ; Registers used s0, s1
                    ;
        delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
         wait_40us: CALL delay_1us
                    SUB s1, 01
                    JUMP NZ, wait_40us
                    RETURN
                    ;
                    ;
                    ; Delay of 1ms.
                    ;
                    ; Registers used s0, s1, s2
                    ;
         delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
          wait_1ms: CALL delay_40us
                    SUB s2, 01
                    JUMP NZ, wait_1ms
                    RETURN
                    ;
                    ; Delay of 20ms.
                    ;
                    ; Delay of 20ms used during initialisation.
                    ;
                    ; Registers used s0, s1, s2, s3
                    ;
        delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
         wait_20ms: CALL delay_1ms
                    SUB s3, 01
                    JUMP NZ, wait_20ms
                    RETURN
                    ;
                    ; Delay of approximately 1 second.
                    ;
                    ; Registers used s0, s1, s2, s3, s4
                    ;
          delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
           wait_1s: CALL delay_20ms
                    SUB s4, 01
                    JUMP NZ, wait_1s
                    RETURN
                    ;
                    ;

                    ;
                    ;**************************************************************************************
                    ; Interrupt Service Routine (ISR)
                    ;**************************************************************************************
                    ;
                    ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
                    ; on the 8 LEDs.
                    ;
                    ;STORE s0, ISR_preserve_s0           ;preserve register
                    ;FETCH s0, LED_pattern               ;read current counter value
                    ;ADD s0, 01                          ;increment counter
                    ;STORE s0, LED_pattern               ;store new counter value
                    ;OUTPUT s0, LED_port                 ;display counter value on LEDs
                    ;FETCH s0, ISR_preserve_s0           ;restore register
                    ;RETURNI ENABLE

                    ISR:           STORE s0, ISR_preserve_s0
                                   STORE s1, ISR_preserve_s1
                                   STORE s2, ISR_preserve_s2
                                   STORE s3, ISR_preserve_s3
                                   STORE s4, 04
                                   STORE s5, 05
                                   STORE s6, 06
                                   STORE s7, 07
                                   STORE s8, 08
                                   STORE s9, 09
                                   STORE sA, 0A
                                   STORE sB, 0B
                                   STORE sC, 0C
                                   STORE sD, 0D
                                   STORE sE, 0E
                                   STORE sF, 0F

                    sum:           INPUT s0, DATA_IN_PORT
                                   COMPARE s0, 80           ;if less than, is positive, else negative
                                   JUMP C, positive
                                   SUB s0, 01               ;if negative, then do 2's complement to make it positive
                                   XOR s0, FF
                    positive:      ADD s1, s0
                                   JUMP NC, no_carry        ;s2 register contains the carry bits
                                   LOAD sB, FF
                                   SUB sB, s1               ;adds remainder of s0 input register if s1 is full (reached 256)
                                   SUB s0, sB
                                   ADD s2, s0               ;if s1 (total) is greater than 256, then add 1 to s2 (since 256 = 8 bits, dividing by 256 will essentially remove the lowest 8 bits.
                                                            ;therefore we need another 8 bits (s2) to hold the values greater than 256)
                    no_carry:      COMPARE s3, FF
                                   JUMP Z, output
                                   ADD s3, 01
                                   JUMP sum

                    output:        CALL set_litle_bit
                                   OUTPUT s2, LED_PORT
                                   FETCH s0, ISR_preserve_s0
                                   FETCH s1, ISR_preserve_s1
                                   FETCH s2, ISR_preserve_s2
                                   FETCH s3, ISR_preserve_s3
                                   FETCH s4, 04
                                   FETCH s5, 05
                                   FETCH s6, 06
                                   FETCH s7, 07
                                   FETCH s8, 08
                                   FETCH s9, 09
                                   FETCH sA, 0A
                                   FETCH sB, 0B
                                   FETCH sC, 0C
                                   FETCH sD, 0D
                                   FETCH sE, 0E
                                   FETCH sF, 0F
                                   RETURNI ENABLE

                    set_litle_bit: LOAD s4, s2                ;only for setting most significant bit and below to 1
                                                              ;by shifting and OR-ing the already averaged value
                        SR0 S4
                        OR s4, s2

                        LOAD s5, s4
                        SR0 s5
                        OR s5, s4

                        LOAD s6, s5
                        SR0 s6
                        OR s6, s5

                        LOAD s7, s6
                        SR0 s7
                        OR s7, s6

                        LOAD s8, s7
                        SR0 s8
                        OR s8, s7

                        LOAD s9, s8
                        SR0 S9
                        OR s9, s8

                        LOAD sA, s9
                        SR0 sA
                        OR sA, s9

                        LOAD s2, sA

                        RETURN;

                    ;
                    ;
                    ;**************************************************************************************
                    ; Interrupt Vector
                    ;**************************************************************************************
                    ;
                    ADDRESS 3FF
                    JUMP ISR
                    ;
                    ;
